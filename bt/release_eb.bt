
kfunc:drop_caches_sysctl_handler {
	@live[tid] = 1;
}

kretfunc:drop_caches_sysctl_handler {
	delete(@live[tid]);
}

kfunc:invalidate_mapping_pages {
	if (!@live[tid]) {
		return;
	}
	$mapping = args.mapping;
	$inode = $mapping->host;
	if ($inode == 0) {
		return;
	}
	if ($inode->i_sb->s_dev == 44 && $inode->i_ino == 1) {
		printf("invalidate mapping pages btrfs btree inode\n");
		@btree_inode[tid] = 1;
	} else {
		return;
	}
	@invalidate_mapping_pages[$mapping->a_ops] = count();
}

kretfunc:invalidate_mapping_pages {
	if (@btree_inode[tid]) {
		@freed[retval] = count();
		delete(@btree_inode[tid]);
	}
}

kretfunc:find_lock_entries {
	if (!@live[tid]) {
		return;
	}
	if (!@btree_inode[tid]) {
		return;
	}
	@find_lock_entries[retval] = count();
}

kfunc:mapping_evict_folio {
	if (!@live[tid]) {
		return;
	}
	if (!@btree_inode[tid]) {
		return;
	}
	$mapping = args.mapping;
	$folio = args.folio;

	@mapping_evict_folio[$folio->mapping->a_ops] = count();
}

kfunc:filemap_release_folio {
	if (!@live[tid]) {
		return;
	}
	if (!@btree_inode[tid]) {
		return;
	}
	$folio = args.folio;
	@filemap_release_folio[$folio->mapping->a_ops] = count();
}

kfunc:btree_release_folio {
	@btree_release_folio_stacks[kstack] = count();
	if (!@live[tid]) {
		return;
	}
	if (!@btree_inode[tid]) {
		return;
	}
	$folio = args.folio;
	@btree_release_folio[$folio->mapping->a_ops] = count();
}

kfunc:remove_mapping {
	$mapping = args.mapping;
	$folio = args.folio;
	$inode = $mapping->host;
	if (@btree_inode[tid]) {
		@btree_inode_invalidate_remove_mapping_stacks[kstack] = count();
	} else if ($inode->i_sb->s_dev == 44 && $inode->i_ino == 1) {
		@btree_inode_remove_mapping_stacks[kstack] = count();
	}
}

/*
kfunc:btrfs_release_extent_buffer_pages {
	@rel_eb_pages_stacks[kstack] = count();
}
*/
